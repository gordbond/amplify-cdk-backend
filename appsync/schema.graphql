type Project {
  id: ID!
  projectId: String
  projectCreationDate: AWSDate
  projectOwnerName: String
  projectOwnerStNo: String
  projectOwnerStName: String
  projectOwnerCity: String
  projectOwnerState: String
  projectOwnerPostalCode: String
  projectOwnerAccountNo: String
  projectLocationofElevatingDevice: String
  projectElevatorContractor: String
  projectElevatorConsultant: String
  projectEC: String
  projectBM: String
  projectGuest: [GuestCode]
  projectElevatorInfo: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type GuestCode {
  id: ID!
  code: String
  guestCode: [Project]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type SigUpCodeTable {
  id: ID!
  SignUpGroup: String
  SignUpCode: String
  CurrentlyAvailableCodes: [String]
  AssignedCodes: [String]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type User {
  id: ID!
  username: String!
  email: String!
  preferred_username: String!
  registration_code: String!
  group: String!
  sheetInformation: String
  embededUrl: String
  subscriptions: [String]
  pending_subscriptions: [String]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Query {
  listUrls: [UpdateUrl]
  getUrl(id: ID!, email: String!): UpdateUrl
  getListOfAlerts: [Alerts]
  getAlertById(elevator_id: String!, project_id: String!, signal_type: String, email: String, userName: String, action: String): Alerts
  updateSubscriptionsByUser(id: ID!, email: String, userName: String): User
  getProject(id: ID!): Project
  listProjects(filter: ModelProjectFilterInput, limit: Int, nextToken: String): ModelProjectConnection
  getGuestCode(id: ID!): GuestCode
  listGuestCodes(filter: ModelGuestCodeFilterInput, limit: Int, nextToken: String): ModelGuestCodeConnection
  getSigUpCodeTable(id: ID!): SigUpCodeTable
  listSigUpCodeTables(filter: ModelSigUpCodeTableFilterInput, limit: Int, nextToken: String): ModelSigUpCodeTableConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getAlerts(id: ID!): Alerts
  listAlerts(filter: ModelAlertsFilterInput, limit: Int, nextToken: String): ModelAlertsConnection
}

type Mutation {
  createCalVarPubSubMsg(projectId: String!, elevatorId: String!, calibrationValue: String!): CalVarPubSub
  createProject(input: CreateProjectInput!): Project
  updateProject(input: UpdateProjectInput!): Project
  deleteProject(input: DeleteProjectInput!): Project
  createGuestCode(input: CreateGuestCodeInput!): GuestCode
  updateGuestCode(input: UpdateGuestCodeInput!): GuestCode
  deleteGuestCode(input: DeleteGuestCodeInput!): GuestCode
  createSigUpCodeTable(input: CreateSigUpCodeTableInput!): SigUpCodeTable
  updateSigUpCodeTable(input: UpdateSigUpCodeTableInput!): SigUpCodeTable
  deleteSigUpCodeTable(input: DeleteSigUpCodeTableInput!): SigUpCodeTable
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  createAlerts(input: CreateAlertsInput!): Alerts
  updateAlerts(input: UpdateAlertsInput!): Alerts
  deleteAlerts(input: DeleteAlertsInput!): Alerts
}

type CalVarPubSub {
  projectId: String!
  elevatorId: String!
  calibrationValue: String!
}

type Alerts {
  id: ID!
  elevator_id: String!
  project_id: String!
  status: String
  signal_type: String!
  alert_type: String!
  alert_message: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type UpdateUrl {
  id: ID!
  data: String!
  email: String!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelProjectConnection {
  items: [Project]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelProjectFilterInput {
  id: ModelIDFilterInput
  projectId: ModelStringFilterInput
  projectCreationDate: ModelStringFilterInput
  projectOwnerName: ModelStringFilterInput
  projectOwnerStNo: ModelStringFilterInput
  projectOwnerStName: ModelStringFilterInput
  projectOwnerCity: ModelStringFilterInput
  projectOwnerState: ModelStringFilterInput
  projectOwnerPostalCode: ModelStringFilterInput
  projectOwnerAccountNo: ModelStringFilterInput
  projectLocationofElevatingDevice: ModelStringFilterInput
  projectElevatorContractor: ModelStringFilterInput
  projectElevatorConsultant: ModelStringFilterInput
  projectEC: ModelStringFilterInput
  projectBM: ModelStringFilterInput
  projectElevatorInfo: ModelStringFilterInput
  and: [ModelProjectFilterInput]
  or: [ModelProjectFilterInput]
  not: ModelProjectFilterInput
}

input CreateProjectInput {
  id: ID
  projectId: String
  projectCreationDate: AWSDate
  projectOwnerName: String
  projectOwnerStNo: String
  projectOwnerStName: String
  projectOwnerCity: String
  projectOwnerState: String
  projectOwnerPostalCode: String
  projectOwnerAccountNo: String
  projectLocationofElevatingDevice: String
  projectElevatorContractor: String
  projectElevatorConsultant: String
  projectEC: String
  projectBM: String
  projectElevatorInfo: String
}

input UpdateProjectInput {
  id: ID!
  projectId: String
  projectCreationDate: AWSDate
  projectOwnerName: String
  projectOwnerStNo: String
  projectOwnerStName: String
  projectOwnerCity: String
  projectOwnerState: String
  projectOwnerPostalCode: String
  projectOwnerAccountNo: String
  projectLocationofElevatingDevice: String
  projectElevatorContractor: String
  projectElevatorConsultant: String
  projectEC: String
  projectBM: String
  projectElevatorInfo: String
}

input DeleteProjectInput {
  id: ID!
}

type Subscription {
  onCreateProject: Project @aws_subscribe(mutations: ["createProject"])
  onUpdateProject: Project @aws_subscribe(mutations: ["updateProject"])
  onDeleteProject: Project @aws_subscribe(mutations: ["deleteProject"])
  onCreateGuestCode: GuestCode @aws_subscribe(mutations: ["createGuestCode"])
  onUpdateGuestCode: GuestCode @aws_subscribe(mutations: ["updateGuestCode"])
  onDeleteGuestCode: GuestCode @aws_subscribe(mutations: ["deleteGuestCode"])
  onCreateSigUpCodeTable: SigUpCodeTable @aws_subscribe(mutations: ["createSigUpCodeTable"])
  onUpdateSigUpCodeTable: SigUpCodeTable @aws_subscribe(mutations: ["updateSigUpCodeTable"])
  onDeleteSigUpCodeTable: SigUpCodeTable @aws_subscribe(mutations: ["deleteSigUpCodeTable"])
  onCreateUser(username: String): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(username: String): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(username: String): User @aws_subscribe(mutations: ["deleteUser"])
  onCreateAlerts: Alerts @aws_subscribe(mutations: ["createAlerts"])
  onUpdateAlerts: Alerts @aws_subscribe(mutations: ["updateAlerts"])
  onDeleteAlerts: Alerts @aws_subscribe(mutations: ["deleteAlerts"])
}

type ModelGuestCodeConnection {
  items: [GuestCode]
  nextToken: String
}

input ModelGuestCodeFilterInput {
  id: ModelIDFilterInput
  code: ModelStringFilterInput
  and: [ModelGuestCodeFilterInput]
  or: [ModelGuestCodeFilterInput]
  not: ModelGuestCodeFilterInput
}

input CreateGuestCodeInput {
  id: ID
  code: String
}

input UpdateGuestCodeInput {
  id: ID!
  code: String
}

input DeleteGuestCodeInput {
  id: ID!
}

type ModelSigUpCodeTableConnection {
  items: [SigUpCodeTable]
  nextToken: String
}

input ModelSigUpCodeTableFilterInput {
  id: ModelIDFilterInput
  SignUpGroup: ModelStringFilterInput
  SignUpCode: ModelStringFilterInput
  CurrentlyAvailableCodes: ModelStringFilterInput
  AssignedCodes: ModelStringFilterInput
  and: [ModelSigUpCodeTableFilterInput]
  or: [ModelSigUpCodeTableFilterInput]
  not: ModelSigUpCodeTableFilterInput
}

input CreateSigUpCodeTableInput {
  id: ID
  SignUpGroup: String
  SignUpCode: String
  CurrentlyAvailableCodes: [String]
  AssignedCodes: [String]
}

input UpdateSigUpCodeTableInput {
  id: ID!
  SignUpGroup: String
  SignUpCode: String
  CurrentlyAvailableCodes: [String]
  AssignedCodes: [String]
}

input DeleteSigUpCodeTableInput {
  id: ID!
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDFilterInput
  username: ModelStringFilterInput
  email: ModelStringFilterInput
  preferred_username: ModelStringFilterInput
  registration_code: ModelStringFilterInput
  group: ModelStringFilterInput
  sheetInformation: ModelStringFilterInput
  embededUrl: ModelStringFilterInput
  subscriptions: ModelStringFilterInput
  pending_subscriptions: ModelStringFilterInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  id: ID
  username: String!
  email: String!
  preferred_username: String!
  registration_code: String!
  group: String!
  sheetInformation: String
  embededUrl: String
  subscriptions: [String]
  pending_subscriptions: [String]
}

input UpdateUserInput {
  id: ID!
  username: String
  email: String
  preferred_username: String
  registration_code: String
  group: String
  sheetInformation: String
  embededUrl: String
  subscriptions: [String]
  pending_subscriptions: [String]
}

input DeleteUserInput {
  id: ID!
}

type ModelAlertsConnection {
  items: [Alerts]
  nextToken: String
}

input ModelAlertsFilterInput {
  id: ModelIDFilterInput
  elevator_id: ModelStringFilterInput
  project_id: ModelStringFilterInput
  status: ModelStringFilterInput
  signal_type: ModelStringFilterInput
  alert_type: ModelStringFilterInput
  alert_message: ModelStringFilterInput
  and: [ModelAlertsFilterInput]
  or: [ModelAlertsFilterInput]
  not: ModelAlertsFilterInput
}

input CreateAlertsInput {
  id: ID
  elevator_id: String!
  project_id: String!
  status: String
  signal_type: String!
  alert_type: String!
  alert_message: String!
}

input UpdateAlertsInput {
  id: ID!
  elevator_id: String
  project_id: String
  status: String
  signal_type: String
  alert_type: String
  alert_message: String
}

input DeleteAlertsInput {
  id: ID!
}
